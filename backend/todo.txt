TODO

1. Add abstract logic for dblp and google scholar - DONE
2. valid_name chacking for all sources - DONE
3. Author clean name while scraping - DONE
4. Fastapi endpoints - query -  DONE
  (filter, download - handled in frontend)
5. implement cache for queries
6. GAE vs AWS Apprunner - DONE (App Engine)
7. Rate Limiting - DONE (1 call / 10sec)
8. TooManyRedirects Error and captcha with dblp, scholar
9. DBLP and Scholar slowing down the script (~10sec overhead)
10. add research assistant chatbot
11.  implement database caching
12.  summary generator 
13.  add customized queries using AND / OR (multiple statements)
14.  Integrate citation metrics and graphs
15.  try to scrape topics/tags
16.  create endpoint author and store all author data in db

Current Databases

1. dblp - VN, aysnc_abs
2. arxiv - VS, text_abs
3. scholar - VS, async_abs
4. pubmed - VS, async_abs
5. inspire - worker
6. acmdl - VS, text_abs
7. biorxiv - worker
8. nature - worker

# Ethernet
   - IEEE Xplore
   - Scopus

# TBA - Priority
   - ScienceDirect
   - Semantic Scholar

# TBA
   - PubChem
   - Web of Science
   - IOPscience
   - RSC (Royal Society of Chemistry)
   - ACS Publications
   - MathSciNet
   - Zentralblatt MATH
   - Project Euclid
   - Social Science Research Network (SSRN)
   - JSTOR
   - RePEc
   - ASME Digital Collection
   - Environmental Research Letters
   - PsycINFO
   - APA PsycNet
   - Project MUSE
   - HeinOnline
   - Westlaw
   - LexisNexis
   - Harvard Business Review


list of authors - fetchL and scrapeL

1. check if author exists
      if exists:
         fetchL.append(scrapeL.pop(author))
      else:
         pass
2. multimain(scrapeL)
3. fetch_from_db(fetchL)
4. bg_tasks.add(scrapeL)
return scrapeL + fetchL
